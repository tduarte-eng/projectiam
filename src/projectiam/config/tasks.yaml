analise_de_entrada_task:
  description: >
    Analisar a entrada: {topic}
    
    Classificar em uma das categorias:
    1. Lista de artefatos técnicos → Delegar para Agente de Artefatos de Tecnologia
    2. Tudo que não for artefato técnico ou código de programação. → Delegar para Agente de boas-vindas  
    3. Código de programação → Delegar para Analista de Codigo
    
    IMPORTANTE: Após a classificação, gerar APENAS a decisão de roteamento no formato JSON.
  expected_output: >
    Resposta em formato JSON válido identificando o agente apropriado:
    Exemplos:
    { "agente": "Agente de Artefatos de Tecnologia", "saida": Delegar para Agente de Artefatos de Tecnologia" }
    { "agente": "Agente de boas-vindas", "saida": "Entrada é uma saudação ou não contém conteúdo técnico" }
    { "agente": "Analista de Codigo", "saida": Delegar para Analista de Codigo }
  agent: agente_de_entrada

analise_boas_vindas_task:
  description: >
    Responda SEMPRE que você IA de modernização de TI  e que necessita de uma entrada técnica para analisar.
    Use uma linguagem simples e clara.
    Mantenha um tom positivo e encorajador, incentivando os usuários a continuarem a interação.
    Seja breve e direto ao ponto, garantindo que sua resposta seja fácil de entender e agradável.
  expected_output: >
    USE SEMPRE essa Saída:
    { "agente": "Agente de boas-vindas", "saida": "
    🚀 Bem-vindo à IAM - IA de Modernização de Sistemas 🧠
      
      Bom dia, sou seu assistente inteligente para avaliação de artefatos de TI com foco em modernização tecnológica.
      Minha missão é analisar códigos, configurações, documentos e demais artefatos do seu sistema, e gerar um relatório detalhado que mensura o grau de modernidade, com base em critérios como: 
      
        - Uso de tecnologias atuais e sustentáveis. \n
        - Aderência a boas práticas de arquitetura e segurança. \n
        - Nível de automação e integração. \n
        - Escalabilidade e modularidade. \n
        - Compatibilidade com ambientes em nuvem e DevOps. \n

    📥 Para começar, envie uma lista de artefatos ou código-fonte do sistema que deseja avaliar."}
    O relatório incluirá observações técnicas e sugestões de melhoria para uma melhor pontuação do Sistema. 
    Os "\n" sinalizam quebras de linha.
  agent: agente_boas_vindas
  context: 
    - analise_de_entrada_task

analise_codigo_task:
  description: >
    *Entrada* = {topic}
    Identifique a linguagem de programação, frameworks e práticas de desenvolvimento utilizadas.
    Avalie a modernidade do código com base em critérios como:
      - Uso de versões recentes da linguagem
      - Adoção de frameworks modernos
      - Implementação de testes automatizados
      - Aderência a padrões de codificação atuais
      - Utilização de práticas de segurança no código
    Forneça uma análise detalhada e técnica do código, destacando pontos fortes e áreas para melhoria.
  expected_output: >
    {"agente": "Analista de Codigo", "saida": "🔍 Análise Técnica do Código:\n\n📌 Linguagem de Programação Identificada: Python 3.11\n📦 Frameworks Utilizados:\n  - FastAPI (para construção de APIs modernas e assíncronas)\n  - Pydantic (validação de dados)\n  - pytest (testes automatizados)\n✅ Avaliação de Modernidade\n  | Critério | Avaliação |\n  |----------|----------|\n  | **Versão da linguagem** | Utiliza Python 3.11, versão estável e recente |\n  | **Frameworks modernos** | FastAPI e Pydantic são amplamente adotados |\n  | **Testes automatizados** | Presença de testes com pytest |\n🧠 Pontos Fortes\n  Uso de tipagem estática, estrutura modular clara\n⚠️ Áreas para Melhoria\n  Segurança: ausência de autenticação/autorização\n📈 Recomendações\n  Implementar autenticação JWT, adicionar docstrings"}
    IMPORTANTE: 
    - A resposta deve ser um JSON válido com os campos "agente" e "saida"
    - O campo "saida" deve conter a análise completa como string
    - Use \n para quebras de linha na análise
    - Caso não haja código na entrada, use: {"agente": "Analista de Codigo", "saida": "Nenhum código identificado para análise"}
  agent: agente_analista_codigo

categorizar_artefatos_task:
  description: >
    Recebe uma lista de artefatos técnicos, tecnologias, frameworks ou linguagens de programação.
    Identifique e Categorize os artefatos da *ENTRADA* nas seguintes categorias:
        - Linguagem de Programação
        - Arquitetura de Sistemas
        - Infraestrutura
        - Banco de Dados
        - DevSecOps / Governança
      Se houver versão do artefato, inclua-a.
      SEMPRE deve seguir ORDEM de CATEGORIA
      Não gere recomendações. Não forneça explicações.
      A saída deve ser uma tabela de categorização conforme o exemplo abaixo:
        Uma linha por categoria, mesmo que não se aplique.
        Use "(Nenhum)" na coluna de Artefatos se a categoria não se aplicar.
  expected_output: >
    Por Exemplo:
    Entrada: 
      S659	NÃO		DB2 S659	NÃO		SQL SERVER 2019 S659	NÃO		SQL SERVER 2016 S659	NÃO		DB2 S659	NÃO		SQL SERVER 2019
      S659	NÃO		SQL SERVER 2016 S659	NÃO	Java	Jboss S659	NÃO	React/ReactNative	nginx S659	NÃO	Java	WebSphere v.8.5
      S659	NÃO	Java	Java 11 S659	NÃO	Java	Java 8 S659	NÃO	React/ReactNative	TypeScript
    Saída:   
    {"agente": "Agente de Artefatos de Tecnologia", "saida": "\n
    | Categoria | Artefatos |\n
    |---------------------------|----------|\n
    | Linguagem de Programação | Java 11, Java 8, TypeScript |\n
    | Arquitetura de Sistemas | Jboss (servidor de aplicações Java EE), WebSphere v.8.5 (servidor de aplicações da IBM), nginx (servidor web e proxy reverso, usado com React/ReactNative) |\n
    | Infraestrutura | nginx, Jboss e WebSphere |\n
    | Banco de Dados | DB2, SQL Server 2016, SQL Server 2019 |\n
    | DevSecOps / Governança | (Nenhum) |"}
    
    Outro Exemplo:
    {"agente": "Agente de Artefatos de Tecnologia", "saida": "\n
    | Categoria | Artefatos |\n
    |---------------------------|----------|\n
    | Linguagem de Programação | .Net 8, Java 17+, Python 3.11+ |\n
    | Arquitetura de Sistemas | Microservices, Serverless |\n
    | Infraestrutura | AWS, Azure, Docker, Kubernetes |\n
    | Banco de Dados | PostgreSQL, NoSQL |\n
    | DevSecOps / Governança | Terraform, Ansible, GitOps |"}
    
    
    IMPORTANTE: 
    - A resposta deve ser um JSON válido com os campos "agente" e "saida"
    - O campo "saida" deve conter a tabela markdown como string
    - Use \n para quebras de linha na tabela
    - Mantenha sempre as 5 categorias na ordem especificada
    - Use "(Nenhum)" se não houver artefatos para uma categoria
  agent: agente_categorizador_de_artefatos
  context: 
    - analise_de_entrada_task

analisar_linguagem_task:
  description: >
    Somente Analisar se houver dados do Categorizador de Artefatos.
    Analisar SOMENTE a categoria *Linguagem de programação* e avaliar sua modernidade e maturidade.
    Se a categoria possuir campo vazio ou "(Nenhum)", responda que não há linguagem para analisar.
    Considere os seguintes critérios para a avaliação:
        A versão é LTS?
        Ainda tem suporte? 
        É uma linguagem moderna?
        Possui bibliotecas/frameworks atualizados?
        Há evidências de testes automatizados?
        Há código legado em refatoração?
    Sugira melhorias ou modernizações se necessário.
    Confirme se a versão da linguagem ainda é suportada.
    
    Segunda tarefa: Analise o salário dos desenvolvedores que utilizam essa linguagem.
      No banco de dados, identifique quem é o que ganha mais e o que ganha menos.
      Por fim, calcule a media dos salarios.
  expected_output: >
    Exemplo de análise para Java 11:
    **Java 11**
    ✅ **Modernidade e Suporte**:
    - Java 11 é uma versão estável e amplamente utilizada em ambientes corporativos.
    - Ainda possui suporte oficial da Oracle e da comunidade OpenJDK.
    📚 **Bibliotecas e Frameworks**:
    - O projeto utiliza frameworks modernos como **Spring Boot 2.7**, que é compatível com Java 11.
    - As dependências estão atualizadas via Maven, com controle de versões centralizado.
    🧪 **Testes Automatizados**:
    - Há evidências de testes automatizados com **JUnit 5** e cobertura de código via **JaCoCo**.
    - O pipeline CI inclui etapas de teste e validação antes do deploy.
    🛠️ **Código Legado e Refatoração**:
    - Algumas classes antigas ainda utilizam padrões do Java 8, mas estão sendo gradualmente refatoradas para aproveitar recursos como `var`, `HttpClient` e melhorias de desempenho.
    💡 **Sugestões de melhoria**:
    - Avaliar a migração para **Java 17 LTS**, que oferece melhorias de performance e novos recursos de linguagem.
    - Adotar ferramentas de análise estática como **SonarQube** para reforçar a qualidade do código.
    - Expandir os testes automatizados para incluir testes de integração com banco de dados e APIs externas.
  agent: analista_de_artefatos_linguagem


analisar_bd_task:
  description: >
    Somente Analisar se houver dados do Categorizador de Artefatos.
    Analisar **SOMENTE** a categoria *Banco de Dados* e avaliar sua modernidade, suporte, segurança e desempenho.
    Se a categoria possuir campo vazio ou "(Nenhum)", responda que não há banco de dados para analisar.
    Considere os seguintes critérios para a avaliação:
        A versão é atual e suportada?
        Possui mecanismos de replicação e backup?
        Quais práticas de segurança são aplicadas (criptografia, controle de acesso)?
        Há evidências de monitoramento e tuning de desempenho?
    Sugira melhorias ou modernizações se necessário.
  expected_output: >
    Exemplo de análise para PostgreSQL 14:
    **PostgreSQL 14**
    ✅ **Modernidade e Suporte**:
    - A versão 14 do PostgreSQL é estável e suporte encerra-se em novembro de 2026.
    - Há suporte ativo da comunidade e documentação oficial.
    🔄 **Replicação e Backup**:
    - O ambiente utiliza **replicação assíncrona** entre servidores para alta disponibilidade.
    - Backups são realizados diariamente via `pg_dump` e armazenados em ambiente seguro.
    🔐 **Segurança**:
    - A base de dados utiliza **criptografia em repouso** via LUKS no disco.
    - O acesso é controlado por roles e permissões específicas.
    - Autenticação via LDAP integrada ao AD corporativo.
    📈 **Desempenho e Monitoramento**:
    - Ferramentas como **pg_stat_statements** e **Prometheus + Grafana** são utilizadas para monitoramento.
    - Há evidências de tuning de queries e índices com base em análise de planos de execução.
    💡 **Sugestões de melhoria**:
    - Avaliar a adoção de **PostgreSQL 15 ou superior** para recursos avançados de paralelismo.
    - Implementar **backup incremental** com ferramentas como `barman` ou `pgBackRest`.
    - Reforçar a auditoria de acessos com logs centralizados.
    Exemplo de análise sem banco de dados:
      "Não há evidências de banco de dados para analisar."
  agent: analista_de_artefatos_banco_dados

resumir_resultados_task:
  description: >
    Analisar os resultados das tarefas anteriores e gerar um relatório técnico consolidado:
      Se houver codigo de programação para analisar, gere a análise do código.
      Se houver artefatos técnicos para categorizar, gere a tabela do categorizador_de_artefatos_task e gere um relatório técnico consolidado.
  expected_output: >
    Exemplo de título com nome do sistema:
      # Relatório Técnico de Análise - Sistema S123
  
    Exemplo de título sem nome do sistema:
      # Relatório Técnico de Análise
    Exemplo de tabela:
    | Categoria                 | Artefatos |
    |---------------------------|----------|
    | Linguagem de Programação  | .Net 8, Java 17+, Python 3.11+ |
    | Arquitetura de Sistemas   | Microservices, Serverless |
    | Infraestrutura            | AWS, Azure, Docker, Kubernetes |
    | Banco de Dados            | PostgreSQL, NoSQL |
    | DevSecOps / Governança    | Terraform, Ansible, GitOps |
    Exemplo de relatório:
    ## Análise de Linguagem de Programação
    (Conteúdo gerado pelo agente analista_de_artefatos_linguagem)  
    ## Análise de Banco de Dados
    (Conteúdo gerado pelo agente analista_de_artefatos_banco_dados)  
    Certifique-se de que o relatório seja claro, conciso e tecnicamente preciso,
    adequado para um público técnico. Use uma linguagem formal e técnica, evitando jargões desnecessários. 
  agent: especialista_integracao
  context:
    - analisar_linguagem_task
    - analisar_bd_task
