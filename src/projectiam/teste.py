from crewai.flow.flow import Flow, listen, start, router
from dotenv import load_dotenv
from litellm import completion
from pydantic import BaseModel, Field
from crewai.agent import Agent
from crewai import Crew, Task
from crewai.tools import tool
from crewai_tools import OCRTool, FileWriterTool, MCPServerAdapter
import asyncio
from typing import Any, Dict, List, Optional, Callable
import json

load_dotenv()


# Vari√°vel global para callback de status
_status_callback: Optional[Callable[[str, int], None]] = None

def set_status_callback(callback: Callable[[str, int], None]):
    """Define a fun√ß√£o de callback para receber atualiza√ß√µes de status"""
    global _status_callback
    _status_callback = callback

def update_status(message: str, progress: int = 0):
    """Envia atualiza√ß√£o de status para o callback, se definido"""
    if _status_callback:
        _status_callback(message, progress)
#######################################        

# Configura√ß√£o do MCPServerAdapter
server_params_list = [
    # Streamable HTTP Server
#    {
#        "url": "http://127.0.0.1:8000/sse", 
#        "transport": "streamable-http"
#    },
    # SSE Server
    {
        "url": "http://127.0.0.1:8081/sse",
        "transport": "sse"
    },
    {
        "url": "http://127.0.0.1:8082/sse",
        "transport": "sse"
    },
#    {
#        "url": "http://127.0.0.1:8083/sse",
#        "transport": "sse"
#    }
]
aggregated_tools = []


try:
    # O MCPServerAdapter deve ser usado como um gerenciador de contexto ou acessado diretamente
    # N√£o use .connect(), use o objeto diretamente ou como context manager
    mcp_adapter = MCPServerAdapter(server_params_list)
    
    # Para obter as ferramentas, use-o como um iter√°vel ou acesse seus atributos
    # Dependendo da vers√£o da biblioteca, pode ser necess√°rio iterar sobre o objeto
    # ou acessar um atributo como .tools
    if hasattr(mcp_adapter, 'tools'):
        aggregated_tools = mcp_adapter.tools
    else:
        # Se n√£o tiver o atributo 'tools', tente usar como iter√°vel
        aggregated_tools = list(mcp_adapter)
    
    print(f"Available aggregated tools: {[getattr(tool, 'name', str(tool)) for tool in aggregated_tools]}")
except Exception as e:
    print(f"Error connecting to MCP server: {e}")
    print("Ensure MCP server is running and accessible with correct configuration.")
#########################################


class ClassificacaoEntrada(BaseModel):
    agente: str = "" # Nome do agente delegado
    saida: str = ""  # Conte√∫do da entrada que ser√° tratado pelo pr√≥ximo agente

# Define flow state
class AnaliseArtefatosState(BaseModel):
    input: str = ""
    analysis: ClassificacaoEntrada | None = None

class ArtefatosTecnologiaResponse(BaseModel):
    tabela_categorizacao: str = ""  # A tabela de categoriza√ß√£o em formato markdown
    linguagem_analise: str = ""      # An√°lise t√©cnica da linguagem, se aplic√°vel
    sistemas_analise: str = ""       # An√°lise t√©cnica dos sistemas, se aplic√°vel
    infraestrutura_analise: str = "" # An√°lise t√©cnica da infraestrutura, se aplic√°vel
    banco_dados_analise: str = ""    # An√°lise t√©cnica do banco de dados, se aplic√°vel
    devsecops_analise: str = ""      # An√°lise t√©cnica de DevSecOps, se aplic√°vel

# Create a flow class
class AnaliseArtefatosFlow(Flow[AnaliseArtefatosState]):
    @classmethod
    def configure(cls, api_key, api_base, api_version, model_name, max_tokens=10000, temperature=1.0, top_p=1.0):
        """Configura os par√¢metros globais da classe para uso posterior"""
        cls._api_key = api_key
        cls._api_base = api_base
        cls._api_version = api_version
        cls._model_name = model_name
        cls._max_tokens = max_tokens
        cls._temperature = temperature
        cls._top_p = top_p

    def parse_result(result):
        """
        Converte CrewOutput em dict de forma segura.
        """
        data = {}

        # tenta pegar direto do raw
        try:
            if hasattr(result, "raw"):
                raw = result.raw
                # se for string JSON, carregar
                if isinstance(raw, str):
                    data = json.loads(raw)
                elif isinstance(raw, dict):
                    data = raw
        except Exception as e:
            print("Erro ao carregar result.raw:", e)

        # fallback: tenta usar to_dict()
        if not data:
            try:
                data = result.to_dict()
            except Exception:
                pass

        return data or {}

    #def __init__(self, api_key, api_base, api_version, model_name, max_tokens, temperature, top_p):
    #    self.api_key = api_key
    #    self.api_base = api_base
    #    self.api_version = api_version
    #    self.model_name = model_name
    #    self.max_tokens = max_tokens
    #    self.temperature = temperature
    #    self.top_p = top_p
    model1 = "azure/bnb-gpt-4.1-nano"
    model2 = "azure/bnb-gpt-4.1"

    @start()
    def entrada(self) -> Dict[str, str]:
        update_status("üîÑ **Iniciando an√°lise:** Processando entrada de dados...", 5)
        print(type(self.state.input))
        #entrada = "\n[InputUsuario]: oi"
        self.state.input = self.state.input.replace("\n[InputUsuario]: ", "")
        self.state.input = str(self.state.input)
        return {"input": self.state.input}

    @listen(entrada)
    def analisar_entrada(self) -> Dict[str, Any]:
        update_status("üß† **Agente de Entrada:** Classificando tipo de conte√∫do...", 15)

        agente_de_entrada = Agent(
            role="Analisador de Entradas de Dados",
            goal="Classificar e encaminhar entradas para os agentes especializados adequados.",
            backstory="""
                "Voc√™ √© um especialista em identificar o tipo de conte√∫do recebido e decidir para qual agente especializado ele deve ser encaminhado.\n\n"
                "Analise a entrada e classifique em uma das categorias:\n"
                "1. **Lista de artefatos t√©cnicos** (tecnologias, frameworks, linguagens) ‚Üí \"Agente de Artefatos de Tecnologia\"\n"
                "2. **C√≥digo de programa√ß√£o** ‚Üí \"Agente de Codigo\"\n"
                "3. **Sauda√ß√µes ou conte√∫do n√£o t√©cnico** ‚Üí \"Agente de boas-vindas\"\n\n"
                "FORMATO DE RESPOSTA OBRIGAT√ìRIO:\n"
                "- Use EXATAMENTE os nomes: \"Agente de Artefatos de Tecnologia\", \"Agente de Codigo\", \"Agente de boas-vindas\"\n"
                "- No campo \"agente\", sempre use: \"[nome do agente]\"\n"
                "- No campo \"saida\", use o input de entrada para ser tratado pelo pr√≥ximo agente delegado\n\n"
            """,
            verbose=True,
            llm=self.model1
        )
        
        analisar_entrada_task = Task(
            description="""
            Classifique a seguinte entrada de acordo com as categorias definidas:
            Entrada: {input}
            Lembre-se:
            - Se for uma lista de tecnologias, frameworks ou linguagens ‚Üí "Agente de Artefatos de Tecnologia"
            - Se for um c√≥digo de programa√ß√£o puro em qualquer linguagem ‚Üí "Agente de Codigo"
            - Se for sauda√ß√£o ou conte√∫do n√£o t√©cnico ‚Üí "Agente de boas-vindas"
                    Exemplos de classifica√ß√£o:
                        ‚Ä¢ Agente de Artefatos de Tecnologia: Java 8, Spring Boot 2.3, MySQL 5.7, Angular 12
                        ‚Ä¢ Agente de Codigo: "public class Example..." 
                        ‚Ä¢ Agente de boas-vindas: "Ol√°, bom dia!"
            N√ÉO FORNE√áA NENHUMA EXPLICA√á√ÉO, APENAS A SA√çDA NO FORMATO JSON OBRIGAT√ìRIO.            
            """,
            expected_output="""
                FORMATO DE RESPOSTA OBRIGAT√ìRIO:
                {"agente": "[nome do agente]", "saida": "{self.state.input}"}
            """,
            agent=agente_de_entrada,
            markdown=True,
            output_pydantic=ClassificacaoEntrada
            #output_file="report.md"
        )
        
        # Execute the analysis with structured output format
        crew = Crew(
           agents=[agente_de_entrada],
           tasks=[analisar_entrada_task],
           verbose=True
        )

        update_status("‚ö° **Executando classifica√ß√£o:** Agente analisando conte√∫do...", 20)

        result = crew.kickoff(inputs={"input": self.state.input})
        # Acessando a sa√≠da da tarefa
        task_output = analisar_entrada_task.output
        print(result.pydantic.agente)
        agente = task_output.pydantic.agente
        saida = self.state.input  # Mant√©m a entrada original para o pr√≥ximo agente

        update_status(f"‚úÖ **Classifica√ß√£o conclu√≠da:** Direcionando para {agente}", 25)
        
        return {"agente": agente, "saida": saida}

    @router(analisar_entrada)
    def router(self, agente):
        print(f"Roteando para o agente: {agente}")
        agente_analysis = agente.get("agente")
        update_status(f"üéØ **Roteamento:** Direcionando para {agente_analysis}", 30)

        if "Agente de boas-vindas" in agente_analysis:
            return "Agente de boas-vindas"  # Padr√£o se n√£o identificado
        elif "Agente de Artefatos de Tecnologia" in agente_analysis:
            return "Agente de Artefatos de Tecnologia"
        elif "Agente de Codigo" in agente_analysis:
            return "Agente de Codigo"

    @listen("Agente de boas-vindas")
    def boas_vindas(self):
        #update_status("üëã **Agente de Boas-vindas:** Gerando mensagem de boas-vindas...", 50)

        resposta = """
            Bom dia, sou seu assistente inteligente para avalia√ß√£o de artefatos de TI com foco em moderniza√ß√£o tecnol√≥gica.
            Minha miss√£o √© analisar c√≥digos, configura√ß√µes, documentos e demais artefatos do seu sistema, e gerar um relat√≥rio 
            detalhado que mensura o **grau de modernidade**, com base em crit√©rios como:

            - **Uso de tecnologias atuais** e sustent√°veis.
            - Ader√™ncia a **boas pr√°ticas** de arquitetura e seguran√ßa.
            - N√≠vel de automa√ß√£o e integra√ß√£o.
            - Escalabilidade e modularidade.
            - Compatibilidade com ambientes em nuvem e DevOps.

            Para come√ßar, voc√™ pode enviar:
            ```bash
            # Lista de tecnologias usadas no seu projeto
            Java 8, Spring Boot 2.3, MySQL 5.7, Angular 12
            ```
        """
        update_status("‚úÖ **Boas-vindas conclu√≠da:** Mensagem gerada com sucesso", 100)

        return resposta

    @listen("Agente de Artefatos de Tecnologia")
    async def agente_artefatos_tecnologia(self) -> Dict[str, Any]:

        update_status("üîß **Agente de Artefatos:** Iniciando an√°lise t√©cnica detalhada...", 35)

        print(f"Analisando artefatos t√©cnicos: {self.state.input}")
        agente_categorizador_de_artefatos = Agent(
            role="Agente de Artefatos de Tecnologia",
            goal="""
                Receber uma entrada de artefatos de tecnologia.
                Identificar, classificar e organizar os artefatos da *ENTRADA* nos grupos nas categorias t√©cnicas.""",
            backstory="""
                Especialista em taxonomia de tecnologias e organiza√ß√£o de conhecimento t√©cnico. 
                Sua fun√ß√£o √© receber uma ENTRADA de ARTEFATOS e categorizar nas seguintes categorias:
                    **Linguagem de Programacao**; **Arquitetura de Sistemas**; **Infraestrutura**; **Banco de Dados**; **DevSecOps / Governanca**;
                """,
            verbose=True,
            llm=self.model1
        )

        agente_de_linguagem = Agent(
            role="Agente de Linguagens de Programa√ß√£o",
            goal="""
                Avaliar a modernidade, suporte e pr√°ticas associadas √†s linguagens de programa√ß√£o utilizadas.
                Fornecer um relat√≥rio t√©cnico detalhado com base na an√°lise da categoria *Linguagem de Programacao*.""",
            backstory="""
                Especialista em linguagens de programa√ß√£o, focado em avaliar vers√µes, suporte, frameworks e
                pr√°ticas de desenvolvimento para garantir a modernidade e efici√™ncia do c√≥digo. 
                Voc√™ deve fornecer um relat√≥rio t√©cnico detalhado com base na an√°lise da categoria *Linguagem de Programacao*.
                """,
            verbose=True,
            llm=self.model1,
            #reasoning=True,  # Ativa racioc√≠nio e planejamento
            #max_reasoning_attempts=3,  # Limite de tentativas de racioc√≠nio
            #max_iter=30,  # Permite mais itera√ß√µes para planejamento complexo
        )

        agente_de_sistemas = Agent(
            role="Agente de Sistemas",
            goal="""
                Avaliar a modernidade, suporte e pr√°ticas associadas aos sistemas utilizados.
                Fornecer um relat√≥rio t√©cnico detalhado com base na an√°lise da categoria *Arquitetura de Sistemas*.""",
            backstory="""
                Especialista em arquitetura de sistemas, focado em avaliar a estrutura, design e
                pr√°ticas de desenvolvimento para garantir a modernidade e efici√™ncia dos sistemas.
                Voc√™ deve fornecer um relat√≥rio t√©cnico detalhado com base na an√°lise da categoria *Arquitetura de Sistemas*.
                """,
            verbose=True,
            llm=self.model1
        )
        
        agente_de_infraestrutura = Agent(
            role="Agente de Infraestrutura",
            goal="""
                Avaliar a modernidade, suporte e pr√°ticas associadas √† infraestrutura utilizada.
                Fornecer um relat√≥rio t√©cnico detalhado com base na an√°lise da categoria *Infraestrutura*.""",
            backstory="""
                Especialista em infraestrutura de TI, focado em avaliar servidores, redes, cloud e
                pr√°ticas de desenvolvimento para garantir a modernidade e efici√™ncia da infraestrutura. 
                Voc√™ deve fornecer um relat√≥rio t√©cnico detalhado com base na an√°lise da categoria *Infraestrutura*.
                """,
            verbose=True,
            llm=self.model2
        )
        
        agente_de_devsecops = Agent(
            role="Agente de DevSecOps",
            goal="""
                Avaliar a modernidade, suporte e pr√°ticas associadas √†s ferramentas e processos de DevSecOps utilizados.
                Fornecer um relat√≥rio t√©cnico detalhado com base na an√°lise da categoria *DevSecOps / Governan√ßa*.""",
            backstory="""
                Especialista em DevSecOps, focado em avaliar ferramentas, automa√ß√£o, seguran√ßa e
                pr√°ticas de desenvolvimento para garantir a modernidade e seguran√ßa do c√≥digo.
                Voc√™ deve fornecer um relat√≥rio t√©cnico detalhado com base na an√°lise da categoria *DevSecOps / Governan√ßa*.
                """,
            verbose=True,
            llm=self.model2
        )

        agente_de_banco_dados = Agent(
            role="Agente de Banco de Dados",
            goal="""
                Avaliar a modernidade, suporte, seguran√ßa e desempenho dos bancos de dados utilizados.
            """,
            backstory="""
                Especialista em bancos de dados, focado em avaliar vers√µes, suporte, seguran√ßa e desempenho
                para garantir a efici√™ncia e confiabilidade dos dados. 
                Voc√™ deve fornecer um relat√≥rio t√©cnico detalhado com base na an√°lise da categoria *Banco de Dados*.
                Considere aspectos como replica√ß√£o, backup, seguran√ßa e tuning de desempenho.
            """,
            verbose=True,
            llm=self.model2
        )

        agente_integracao = Agent(
            role="Especialista em Integra√ß√£o de Resultados",
            goal="Resumir e consolidar todos os resultados das an√°lises anteriores em um √∫nico relat√≥rio.",
            backstory="""
                Voc√™ √© um especialista em integra√ß√£o de informa√ß√µes t√©cnicas, capaz de sintetizar dados complexos
                e apresentar um resumo coeso e compreens√≠vel. Sua fun√ß√£o √© garantir que todas as an√°lises anteriores sejam
                integradas de forma clara e concisa, destacando os pontos mais relevantes para a tomada de decis√£o. 
            """,
            verbose=True,
            llm=self.model2
        )

        categorizar_artefatos_task = Task(
            description="""
                Baseado na decis√£o do agente de entrada: {input},
                Recebe uma lista de artefatos t√©cnicos, tecnologias, frameworks ou linguagens de programa√ß√£o.
                N√ÉO INVENTE artefatos que n√£o estejam na *ENTRADA*.
                Identifique e Categorize os artefatos da *ENTRADA* nas seguintes categorias:
                    - Linguagem de Programacao
                    - Arquitetura de Sistemas
                    - Infraestrutura
                    - Banco de Dados
                    - DevSecOps / Governanca
                Inclua-a a vers√£o do Artefato.
                SEMPRE deve seguir ORDEM de CATEGORIA
                N√£o gere recomenda√ß√µes. N√£o forne√ßa explica√ß√µes.
                A sa√≠da deve ser uma tabela de categoriza√ß√£o conforme o exemplo abaixo:
                    Uma linha por categoria, mesmo que n√£o se aplique.
                    Use "(Nenhum)" na coluna de Artefatos se a categoria n√£o se aplicar.
                IMPORTANTE: 
                - Use APENAS \\n (quebra simples) para quebras de linha na tabela
                - N√ÉO use \\n\\n (quebra dupla) 
                - Mantenha sempre as 5 categorias na ordem especificada
                - Use "(Nenhum)" se n√£o houver artefatos para uma categoria
                - SEMPRE use os campos CATEGORIA e ARTEFATOS na tabela;
                - Saida em tabela_categorizacao
                """,
            expected_output="""
            Usar sempre esse Modelo de Sa√≠da (com quebras simples \\n):   
            | Categoria                 | Artefatos                     |\\n|---------------------------|-------------------------------|\\n| Linguagem de Programacao  | Java 11, Java 8, TypeScript   |\\n| Arquitetura de Sistemas   | Jboss, WebSphere v.8.5, nginx |\\n| Infraestrutura            | nginx, Jboss e WebSphere      |\\n| Banco de Dados            | DB2, SQL Server 2016, SQL Server 2019 |\\n| DevSecOps / Governan√ßa    | (Nenhum)                      |""",
            agent=agente_categorizador_de_artefatos,
            markdown=True,
            output_pydantic=ArtefatosTecnologiaResponse
            )

        analisar_linguagem_task = Task(
            description="""
                Somente Analisar se houver dados do Categorizador de Artefatos.
                Analisar SOMENTE a categoria *Linguagem de programacao* e avaliar sua modernidade e maturidade.
                Se a categoria possuir campo vazio ou "(Nenhum)", responda que n√£o h√° linguagem para analisar.
                
                **PROCESSO DE AVALIA√á√ÉO DIN√ÇMICA:**
                1. Para CADA linguagem identificada na categoria:
                - Use as ferramentas MCP para pesquisar: "[LINGUAGEM] latest version LTS support roadmap 2024 2025"
                - Pesquise informa√ß√µes sobre: "end of life [LINGUAGEM] [VERS√ÉO] support status"
                - Verifique: "[LINGUAGEM] ecosystem frameworks libraries 2024"
                
                2. **CRIT√âRIOS DE PONTUA√á√ÉO BASEADOS NA PESQUISA:**
                
                **CRIT√âRIO 1 - VERS√ÉO E SUPORTE LTS (M√ÅXIMO 8 PONTOS):**
                Para determinar a pontua√ß√£o, pesquise e avalie:
                - √â a vers√£o LTS mais recente dispon√≠vel? ‚Üí 8.0 pontos
                - √â uma vers√£o LTS anterior mas ainda suportada? ‚Üí 7.2 pontos  
                - √â vers√£o est√°vel mas n√£o LTS? ‚Üí 6.4 pontos
                - Vers√£o suportada mas considerada antiga? ‚Üí 5.6 pontos
                - Suporte termina em menos de 1 ano? ‚Üí 4.8 pontos
                - Vers√£o sem suporte oficial (EOL)? ‚Üí 2.4 pontos
                - N√£o especificado? ‚Üí 0 pontos
                
                **CRIT√âRIO 2 - ECOSSISTEMA (M√ÅXIMO 1 PONTO):**
                Pesquise sobre o ecossistema atual da linguagem:
                - Bibliotecas/frameworks amplamente adotados e atualizados? ‚Üí 1.0 ponto
                - Ecossistema ativo mas com algumas limita√ß√µes? ‚Üí 0.5 ponto
                - Ecossistema estagnado ou limitado? ‚Üí 0 ponto
                
                **CRIT√âRIO 3 - FERRAMENTAS DE TESTE (M√ÅXIMO 0.5 PONTOS):**
                Pesquise sobre ferramentas de teste dispon√≠veis:
                - Ferramentas maduras e amplamente adotadas? ‚Üí 0.5 ponto
                - Algumas ferramentas dispon√≠veis? ‚Üí 0.25 ponto
                - Suporte limitado? ‚Üí 0 ponto
                
                **CRIT√âRIO 4 - MODERNIDADE (M√ÅXIMO 0.5 PONTOS):**
                Avalie caracter√≠sticas modernas baseadas na pesquisa:
                - Recursos modernos ativos (async/await, type safety, etc.)? ‚Üí 0.5 ponto
                - Alguns recursos modernos? ‚Üí 0.25 ponto
                - Caracter√≠sticas predominantemente legadas? ‚Üí 0 ponto
                
                **CONSULTAS DE PESQUISA SUGERIDAS POR LINGUAGEM:**
                - Para Java: "Java [VERS√ÉO] LTS support roadmap Oracle OpenJDK"
                - Para .NET: ".NET [VERS√ÉO] support policy Microsoft lifecycle"
                - Para Python: "Python [VERS√ÉO] support status end of life PSF"
                - Para JavaScript/TypeScript: "ECMAScript [ANO] features TypeScript latest version"
                - Para outras linguagens: "[LINGUAGEM] [VERS√ÉO] support lifecycle community"
                
                **INSTRU√á√ïES ESPEC√çFICAS:**
                1. SEMPRE pesquise informa√ß√µes atualizadas antes de pontuar
                2. Use a ferramenta calcular_soma para cada linguagem
                3. Use a ferramenta calcular_media para a pontua√ß√£o final da categoria
                4. Cite as fontes das informa√ß√µes encontradas
                5. Se a pesquisa n√£o retornar resultados conclusivos, use as informa√ß√µes de contexto como fallback
                
                **FONTES PREFERENCIAIS PARA VALIDA√á√ÉO:**
                - Sites oficiais das linguagens
                - Documenta√ß√£o de suporte/lifecycle oficial
                - GitHub repos oficiais
                - Stack Overflow Insights
                - Developer surveys (Stack Overflow, JetBrains, etc.)
                
                Sa√≠da em linguagem_analise""",
            expected_output="""
                ## Linguagem de Programa√ß√£o:
                Modernidade: [NOTA_MEDIA]/10

                ### [Nome da Linguagem e Vers√£o]:
                
                **Pesquisa Realizada:**
                - Consulta: "[LINGUAGEM] [VERS√ÉO] LTS support status 2024"
                - Fontes consultadas: [Lista das fontes encontradas]
                
                **An√°lise Detalhada:**
                - **Suporte e LTS**: [NOTA_LTS]/8.0 - [Status atual baseado na pesquisa]
                - **Ecossistema**: [NOTA_ECO]/1.0 - [Avalia√ß√£o do ecossistema baseada na pesquisa]
                - **Ferramentas de Teste**: [NOTA_TESTE]/0.5 - [Ferramentas identificadas na pesquisa]
                - **Modernidade**: [NOTA_MOD]/0.5 - [Recursos modernos encontrados]
                - **Total**: [SOMA_TOTAL]/10.0
                
                **Informa√ß√µes Atualizadas Encontradas:**
                - Data de fim de suporte: [DATA ou "N√£o definida"]
                - Vers√£o LTS atual: [VERS√ÉO]
                - Pr√≥xima vers√£o planejada: [VERS√ÉO e DATA]
                
                ‚úÖ **Pontos Fortes**: [Baseado nas informa√ß√µes pesquisadas]
                ‚ö†Ô∏è **Pontos de Aten√ß√£o**: [Riscos identificados na pesquisa]
                üí° **Recomenda√ß√µes**: [Sugest√µes baseadas no roadmap encontrado]
                
                ---
                
                ### Resumo da Categoria:
                **M√©dia Geral**: [MEDIA_FINAL]/10.0
                
                **Principais Descobertas da Pesquisa:**
                1. [Informa√ß√£o relevante encontrada]
                2. [Segunda informa√ß√£o importante]
                3. [Terceira descoberta]
                
                **Prioridades de Moderniza√ß√£o (baseadas na pesquisa atual):**
                1. [A√ß√£o priorit√°ria com base nas informa√ß√µes mais recentes]
                2. [Segunda prioridade]
                3. [Terceira prioridade]
                
                **Fontes Consultadas:**
                - [Lista das principais fontes utilizadas na an√°lise]""",
            agent=agente_de_linguagem,
            context=[categorizar_artefatos_task],
            output_pydantic=ArtefatosTecnologiaResponse,
            markdown=True,
            tools=aggregated_tools,
            async_execution=True
        )
        
        analisar_sistemas_task = Task(
            description="""
                Somente Analisar se houver dados do Categorizador de Artefatos.
                Analisar SOMENTE a categoria *Arquitetura de Sistemas* e avaliar sua modernidade e maturidade.
                Se a categoria possuir campo vazio ou "(Nenhum)", responda que n√£o h√° arquitetura para analisar.
                Considere os seguintes crit√©rios para a avalia√ß√£o:
                    A arquitetura √© monol√≠tica, modular ou baseada em microsservi√ßos?
                    Utiliza padr√µes modernos de design (ex: REST, event-driven)?
                    H√° evid√™ncias de escalabilidade e resili√™ncia?
                    Est√° preparada para nuvem (cloud-native)?
                Sugira melhorias ou moderniza√ß√µes se necess√°rio.
                Gere uma metrica de modernidade de 0 a 10.
                Acesse o MCP para buscar informa√ß√µes atualizadas sobre arquitetura, se necess√°rio.
                Estabele√ßa pontua√ß√£o de modernidade para cada artefato:
                    SOBRE ARQUITETURA: (MAXIMO 4 PONTOS)
                        Monol√≠tica: 2
                        Modular: 3
                        Microsservi√ßos: 4
                        (Nenhum)    : 0
                    SOBRE PADR√ïES DE DESIGN: (MAXIMO 2 PONTOS)   
                        Modernos e amplamente adotados (REST, GraphQL): 2
                        Moderados (SOAP, RPC): 1
                        Obsoletos ou sem evid√™ncias: 0
                    SOBRE ESCALABILIDADE E RESILI√äNCIA: (MAXIMO 2 PONTOS)
                        Evid√™ncias claras de escalabilidade e resili√™ncia: 1
                        Algumas evid√™ncias: 0.5
                        Sem evid√™ncias: 0
                    SOBRE PREPARA√á√ÉO PARA NUVEM: (MAXIMO 2 PONTOS)
                        Cloud-native com cont√™ineres e orquestra√ß√£o: 2 
                        Parcialmente preparado para nuvem: 1
                        Sem evid√™ncias: 0
                Use a ferramenta calcular soma das notas de cada artefato
                Use a ferramenta de calcular media para obter a pontua√ß√£o final.
                Sugira melhorias ou moderniza√ß√µes para uma pontua√ß√£o mais alta, se necess√°rio.
                Saida em arquitetura_analise.""",
            expected_output="""
                Exemplo de an√°lise para Arquitetura Monol√≠tica:
                ## Arquitetura de Sistemas:
                ### Arquitetura Monol√≠tica
                ‚ùå **Modernidade e Escalabilidade**:
                - A arquitetura monol√≠tica pode limitar a escalabilidade horizontal e a agilidade no desenvolvimento.
                - Considerar a ado√ß√£o de uma arquitetura baseada em microsservi√ßos para melhorar a modularidade e escalabilidade.
                ‚öôÔ∏è **Padr√µes de Design**:
                - Atualmente, a aplica√ß√£o utiliza APIs REST, o que √© positivo.
                - Avaliar a introdu√ß√£o de padr√µes event-driven para melhorar a reatividade e resili√™ncia.
                ‚òÅÔ∏è **Prepara√ß√£o para Nuvem**:
                - A aplica√ß√£o n√£o √© totalmente cloud-native, o que pode dificultar a migra√ß√£o para ambientes em nuvem.
                - Recomenda-se a ado√ß√£o de cont√™ineres (Docker) e orquestra√ß√£o (Kubernetes) para facilitar a implanta√ß√£o em nuvem.
                üí° **Sugest√µes de melhoria**:
                - Iniciar um plano de migra√ß√£o gradual para microsservi√ßos, come√ßando pelos m√≥dulos mais cr√≠ticos.
                - Implementar pr√°ticas de DevOps para acelerar o ciclo de desenvolvimento e implanta√ß√£o.
                - Avaliar o uso de plataformas de nuvem como AWS, Azure ou GCP para aproveitar servi√ßos gerenciados e escalabilidade autom√°tica.""",
            agent=agente_de_sistemas,
            context=[categorizar_artefatos_task],
            output_pydantic=ArtefatosTecnologiaResponse,
            markdown=True,
            tools=aggregated_tools, #No tools allowed
            async_execution=True
            )
        
        analisar_infraestrutura_task = Task(
            description="""
                Somente Analisar se houver dados do Categorizador de Artefatos.
                Analisar SOMENTE a categoria *Infraestrutura* e avaliar sua modernidade e maturidade.
                Se a categoria possuir campo vazio ou "(Nenhum)", responda que n√£o h√° infraestrutura para analisar.
                Considere os seguintes crit√©rios para a avalia√ß√£o:
                    A infraestrutura √© on-premises, cloud ou h√≠brida?
                    Utiliza cont√™ineres e orquestra√ß√£o (ex: Docker, Kubernetes)?
                    H√° evid√™ncias de automa√ß√£o (ex: IaC, CI/CD)?
                    Possui monitoramento e logging adequados?
                Sugira melhorias ou moderniza√ß√µes se necess√°rio.
                Gere uma metrica de modernidade de 0 a 10.
                Acesse o MCP para buscar informa√ß√µes atualizadas sobre infraestrutura, se necess√°rio.
                Saida em infraestrutura_analise.""",
            expected_output="""
                Exemplo de an√°lise para Infraestrutura On-Premises:
                ## Infraestrutura:
                ### Infraestrutura On-Premises
                ‚ö†Ô∏è **Modernidade e Flexibilidade**:
                - A infraestrutura on-premises pode limitar a escalabilidade e agilidade.
                - Considerar a ado√ß√£o de uma estrat√©gia h√≠brida ou migra√ß√£o para nuvem para aproveitar a elasticidade e servi√ßos gerenciados.
                üê≥ **Cont√™ineres e Orquestra√ß√£o**:
                - Ado√ß√£o de cont√™ineres (ex: Docker) e orquestra√ß√£o (ex: Kubernetes) pode melhorar a portabilidade e escalabilidade.
                - Implementar pr√°ticas de CI/CD para automa√ß√£o de testes e deploy.
                ‚öôÔ∏è **Automa√ß√£o**:
                - Utiliza√ß√£o de Infrastructure as Code (IaC) com ferramentas como Terraform ou Ansible pode aumentar a efici√™ncia e reduzir erros manuais.
                - Automatizar processos de provisionamento e configura√ß√£o.
                üìä **Monitoramento e Logging**:
                - Implementar solu√ß√µes de monitoramento (ex: Prometheus, Grafana) para visibilidade em tempo real.
                - Centralizar logs com ferramentas como ELK Stack ou Splunk para facilitar a an√°lise.
                üí° **Sugest√µes de melhoria**:
                - Avaliar a migra√ß√£o para uma solu√ß√£o de nuvem p√∫blica (AWS, Azure, GCP) para maior flexibilidade.
                - Adotar pr√°ticas de DevOps para acelerar o ciclo de desenvolvimento e implanta√ß√£o.
                - Investir em seguran√ßa da infraestrutura, incluindo firewalls, VPNs e pol√≠ticas de acesso.""",
            agent=agente_de_infraestrutura,
            context=[categorizar_artefatos_task],
            output_pydantic=ArtefatosTecnologiaResponse,
            markdown=True,
            tools=aggregated_tools, #No tools allowed
            async_execution=True
            )

        analisar_bd_task = Task(
            description="""
                Somente Analisar se houver dados do Categorizador de Artefatos.
                Analisar **SOMENTE** a categoria *Banco de Dados* e avaliar sua modernidade, suporte, seguran√ßa e desempenho.
                Se a categoria possuir campo vazio ou "(Nenhum)", responda que n√£o h√° banco de dados para analisar.
                Considere os seguintes crit√©rios para a avalia√ß√£o:
                    A vers√£o √© atual e suportada?
                    Possui mecanismos de replica√ß√£o e backup?
                    Quais pr√°ticas de seguran√ßa s√£o aplicadas (criptografia, controle de acesso)?
                    H√° evid√™ncias de monitoramento e tuning de desempenho?
                Sugira melhorias ou moderniza√ß√µes se necess√°rio.
                Gere uma metrica de modernidade de 0 a 10.
                Acesse o MCP para buscar informa√ß√µes atualizadas sobre o banco de dados, se necess√°rio.
                Saida em banco_de_dados_analise.""",
            expected_output="""
                Exemplo de an√°lise para PostgreSQL 14:
                
                ## Banco de Dados:
                ### PostgreSQL 14

                ‚úÖ **Modernidade e Suporte**:
                - A vers√£o 14 do PostgreSQL √© est√°vel e suporte encerra-se em novembro de 2026.
                - H√° suporte ativo da comunidade e documenta√ß√£o oficial.
                
                üîÑ **Replica√ß√£o e Backup**:
                - O ambiente utiliza **replica√ß√£o ass√≠ncrona** entre servidores para alta disponibilidade.
                - Backups s√£o realizados diariamente via `pg_dump` e armazenados em ambiente seguro.
                
                üîê **Seguran√ßa**:
                - A base de dados utiliza **criptografia em repouso** via LUKS no disco.
                - O acesso √© controlado por roles e permiss√µes espec√≠ficas.
                - Autentica√ß√£o via LDAP integrada ao AD corporativo.
                
                üìà **Desempenho e Monitoramento**:
                - Ferramentas como **pg_stat_statements** e **Prometheus + Grafana** s√£o utilizadas para monitoramento.
                - H√° evid√™ncias de tuning de queries e √≠ndices com base em an√°lise de planos de execu√ß√£o.
                
                üí° **Sugest√µes de melhoria**:
                - Avaliar a ado√ß√£o de **PostgreSQL 15 ou superior** para recursos avan√ßados de paralelismo.
                - Implementar **backup incremental** com ferramentas como `barman` ou `pgBackRest`.
                - Refor√ßar a auditoria de acessos com logs centralizados.
                - Considerar a ado√ß√£o de **particionamento** para tabelas muito grandes, melhorando desempenho.""",
            agent=agente_de_banco_dados,
            context=[categorizar_artefatos_task],
            output_pydantic=ArtefatosTecnologiaResponse,
            markdown=True,
            tools=aggregated_tools, #No tools allowed
            async_execution=True
            )

        analisar_devsecops_task = Task(
            description="""
                Somente Analisar se houver dados do Categorizador de Artefatos.
                Analisar SOMENTE a categoria *DevSecOps / Governan√ßa* e avaliar sua modernidade e maturidade.
                Se a categoria possuir campo vazio ou "(Nenhum)", responda que n√£o h√° DevSecOps para analisar.
                Considere os seguintes crit√©rios para a avalia√ß√£o:
                    Quais ferramentas de CI/CD s√£o utilizadas?
                    H√° pr√°ticas de seguran√ßa integradas no pipeline (ex: SAST, DAST)?
                    Utiliza Infrastructure as Code (IaC)?
                    H√° evid√™ncias de monitoramento e compliance?
                Sugira melhorias ou moderniza√ß√µes se necess√°rio.
                Gere uma metrica de modernidade de 0 a 10.
                Acesse o MCP para buscar informa√ß√µes atualizadas sobre DevSecOps, se necess√°rio.
                Saida em devsecops_analise.""",
            expected_output="""
                Exemplo de an√°lise para Jenkins e GitLab CI:
                ## DevSecOps / Governan√ßa:
                ### Jenkins e GitLab CI
                ‚úÖ **Ferramentas de CI/CD**:
                - O uso combinado de Jenkins e GitLab CI oferece flexibilidade e robustez no pipeline de integra√ß√£o e entrega cont√≠nua.
                - Jenkins √© utilizado para builds complexos, enquanto GitLab CI √© integrado ao reposit√≥rio Git para automa√ß√£o de testes e deploy.
                üîí **Pr√°ticas de Seguran√ßa**:
                - Integra√ß√£o de ferramentas SAST e DAST no pipeline para identifica√ß√£o de vulnerabilidades.
                - Uso de vari√°veis de ambiente para gerenciamento seguro de credenciais.
                - Implementa√ß√£o de controles de acesso baseados em fun√ß√£o (RBAC) no GitLab.
                üì¶ **Infrastructure as Code (IaC)**:
                - Utiliza√ß√£o de Terraform para provisionamento de infraestrutura em nuvem.
                - Armazenamento de configura√ß√µes em reposit√≥rios Git para versionamento.
                üìä **Monitoramento e Compliance**:
                - Implementa√ß√£o de monitoramento de logs com ELK Stack.
                - Auditoria de acessos e mudan√ßas em infraestrutura.
                üí° **Sugest√µes de melhoria**:
                - Avaliar a ado√ß√£o de ferramentas de IaC para maior consist√™ncia e reprodutibilidade.
                - Implementar testes automatizados para valida√ß√£o de seguran√ßa em cada etapa do pipeline.
                - Refor√ßar a cultura DevSecOps com treinamentos e workshops para a equipe.
                - Considerar a ado√ß√£o de ferramentas de orquestra√ß√£o de containers como Kubernetes para maior escalabilidade.""",
            agent=agente_de_devsecops,
            context=[categorizar_artefatos_task],
            output_pydantic=ArtefatosTecnologiaResponse,
            markdown=True,
            tools=aggregated_tools, #No tools allowed
            async_execution=True
            )

        resumir_resultados_task = Task(
            description="""
                Analisar os resultados das tarefas anteriores e gerar um relat√≥rio t√©cnico consolidado:
                Verifique se todos os artefatos foram analisados.
                Se houver codigo de programa√ß√£o para analisar, gere a an√°lise do c√≥digo.
                Se houver artefatos t√©cnicos para categorizar, gere a tabela do categorizador_de_artefatos_task e gere um relat√≥rio t√©cnico consolidado.
                O relat√≥rio deve focar em quais categorias o usuario deve focar para ter um indice mais moderno;
                O relatorio deve ser adequado para um p√∫blico t√©cnico. Use uma linguagem formal e t√©cnica, evitando jarg√µes desnecess√°rios.
                A An√°lise √© por categoria.
            """,
            expected_output="""
                # Relat√≥rio T√©cnico de An√°lise - Sistema S123

                | Categoria                 | Artefatos | Modernidade (0-10) |
                |---------------------------|----------|    --------------------|    
                | Linguagem de Programacao  | java 11, java 8, Typescript |  7.9 |
                | Arquitetura de Sistemas   | Jboss, WebSphere 8.5, nginx |   4 |
                | Infraestrutura            | nginx, Jboss, WebSphere      |  3.5  |
                | Banco de Dados            | DB2, SQL SERVER 2016, SQL SERVER 2019 |       7.3 |       
                | DevSecOps / Governan√ßa    | (NENHUM) |  0 |

                ### An√°lise de Linguagem de Programa√ß√£o
                Modernidade: 7.9/10
                    - Nota Java 11: 9.2
                    - Nota Java 8: 6.1
                    - Nota TypeScript: 8.4
                    - M√©dia da categoria: 7.9

                - Java 11 e Java 8: ambas est√£o em modo EOL (End of Life), ou seja, fora do ciclo oficial de suporte p√∫blico. Seu uso implica riscos elevados de seguran√ßa, limita√ß√µes de compatibilidade com frameworks modernos e tend√™ncia de problemas com inova√ß√£o e compliance regulat√≥rio. Recomenda-se migra√ß√£o imediata para vers√µes oficialmente suportadas, como Java 17 LTS ou superior.
                - TypeScript: ponto positivo na stack, pois √© refer√™ncia para aplica√ß√µes modernas em front-end e fullstack, por√©m a aus√™ncia de backends atualizados limita o ganho. Adotar TypeScript nas vers√µes mais recentes e associ√°-lo a solu√ß√µes serverless ou microsservi√ßos pode elevar consideravelmente a modernidade da categoria.
                Sugest√£o principal: Priorizar a atualiza√ß√£o de todas as bases Java para release LTS vigente e atrelar pr√°ticas de CI/CD modernas com cobertura de testes automatizados e ferramentas de qualidade, como SonarQube.

                ### An√°lise de Banco de Dados
                Modernidade: 7.3/10
                
                -DB2 (12.x): bastante avan√ßado, moderno, com recursos de AI e cloud, m√©tricas robustas de seguran√ßa, replica√ß√£o e monitoramento. Ideal avaliar uso de servi√ßos gerenciados na nuvem.
                -SQL Server 2016: pr√≥ximo do fim do suporte estendido, limita uso de recursos e integridade. Sugest√£o de migra√ß√£o imediata para SQL Server 2019 ou superior.
                -SQL Server 2019: atualizado, seguro, escal√°vel e preparado para ambientes h√≠bridos/cloud. Recomenda-se futura atualiza√ß√£o para SQL Server 2022.
                M√©dia da categoria √© razo√°vel; migrar inst√¢ncias defasadas e integrar ferramentas de auditoria e automa√ß√£o para maior modernidade e seguran√ßa.
                
                ### An√°lise de Arquitetura de Sistemas
                Modernidade: 4/10
                
                -JBoss e WebSphere v.8.5: uso demonstra predomin√¢ncia de arquitetura tradicional monol√≠tica, com limita√ß√£o de escalabilidade e alto risco operacional/legado. WebSphere 8.5 encontra-se amplamente considerado obsoleto no mercado, com desafios para integra√ß√µes e evolu√ß√£o.
                -nginx: elemento positivo como proxy e balanceador, permite moderniza√ß√µes r√°pidas se integrado a pr√°ticas de containeriza√ß√£o e cloud.
                N√£o h√° evid√™ncias concretas de uso disseminado de containers, orquestra√ß√£o ou padr√µes de microsservi√ßos/aplica√ß√µes cloud-native. Recomenda-se investimento na refatora√ß√£o da arquitetura, priorizando microsservi√ßos, containers (Docker), orquestra√ß√£o (Kubernetes) e componentes open-source.
                Principal foco de moderniza√ß√£o: transi√ß√£o arquitetural para cloud-native, ado√ß√£o progressiva de microsservi√ßos, automa√ß√£o e APIs modernas.
                
                ### An√°lise de Infraestrutura
                Modernidade: 3.5/10
                Predomina ambiente tradicional (on-premises ou virtualizado) com servidores de aplica√ß√£o convencionais e nginx, sem ind√≠cios de cloud, containeriza√ß√£o ou automa√ß√£o avan√ßada.
                Aus√™ncia de pr√°ticas de Infrastructure as Code (IaC), automa√ß√£o CI/CD, monitoramento proativo e orquestra√ß√£o indica lacunas em escalabilidade e agilidade operacional.
                Recomenda√ß√£o: evoluir para infraestrutura baseada em containers (Docker), orquestrada por Kubernetes, com automa√ß√£o (Terraform, Ansible) e monitoramento/logging centralizado (Prometheus, Grafana, ELK/Splunk).
                Grande oportunidade de ganho ao migrar ambiente para arquitetura h√≠brida ou cloud, elevando fortemente o √≠ndice de modernidade da categoria.
                
                ### An√°lise de DevSecOps / Governan√ßa
                Modernidade: 0/10
                N√£o h√° artefatos, pr√°ticas ou ferramentas DevSecOps/governan√ßa implementados ou catalogados.
                Forte lacuna em seguran√ßa, automa√ß√£o, compliance e rastreabilidade.
                Recomenda√ß√£o: iniciar imediatamente esfor√ßos para ado√ß√£o de DevSecOps com integra√ß√£o de pipelines CI/CD, automa√ß√£o de seguran√ßa (SAST/DAST), pr√°ticas de Infrastructure as Code (Terraform/Ansible), monitoramento cont√≠nuo e controles de auditoria/governan√ßa. Implementa√ß√£o acelerada de DevSecOps elevar√° substancialmente o √≠ndice de maturidade e modernidade do ecossistema.
                Resumo executivo para tomada de decis√£o:

                ### Para alcan√ßar √≠ndices de modernidade competitivos, recomenda-se foco priorit√°rio em:

                Migra√ß√£o das linguagens e frameworks para vers√µes LTS suportadas e integra√ß√£o de ferramentas modernas.
                Evolu√ß√£o arquitetural em dire√ß√£o a microsservi√ßos, containers e cloud-native, abandonando servidores de aplica√ß√£o legados.
                Iniciativas de automa√ß√£o, monitoramento e logging centralizado na infraestrutura, com IaC e DevOps.
                Atualiza√ß√£o autom√°tica e fortalecimento de seguran√ßa/auditoria dos bancos de dados com integra√ß√£o cloud onde poss√≠vel.
                Implementa√ß√£o acelerada de pr√°ticas e ferramentas DevSecOps, integrando seguran√ßa, compliance e entrega cont√≠nua ponta-a-ponta.
                Estas a√ß√µes devem ser acompanhadas por avalia√ß√£o de d√©bitos t√©cnicos, parcerias estrat√©gicas e capacita√ß√£o da equipe em tecnologias de cloud, containers, automa√ß√£o e seguran√ßa.                """,
            agent=agente_integracao,
            context=[analisar_linguagem_task, 
                    analisar_sistemas_task, 
                    analisar_infraestrutura_task, 
                    analisar_bd_task, 
                    analisar_devsecops_task],
            output_pydantic=ArtefatosTecnologiaResponse,
            markdown=True,
            output_file="relatorio_tecnico.md"
        )

        crew = Crew(
           agents=[agente_categorizador_de_artefatos,
                   agente_de_linguagem,
                   agente_de_sistemas,
                   agente_de_infraestrutura,
                   agente_de_banco_dados,
                   agente_de_devsecops,
                   agente_integracao],
           tasks=[categorizar_artefatos_task,
                   analisar_linguagem_task,
                   analisar_sistemas_task,
                   analisar_infraestrutura_task,
                   analisar_bd_task,
                   analisar_devsecops_task,
                   resumir_resultados_task
           ],
           verbose=True
        )
        update_status("üöÄ **Executando crew:** Processando an√°lise com todos os agentes...", 95)
       
        inputs_array = [{'input': self.state.input}]
        result = await crew.kickoff_async(inputs={'input': self.state.input})
        # Acessando a sa√≠da da tarefa
        
        
        #tabela_raw = result.pydantic.tabela_categorizacao
        #tabela_formatada = tabela_raw.replace('\n\n', '\n')  # Remove quebras duplas

        #dados_linguagem_analise = json.loads(analisar_linguagem_task.output.raw)
        #analise_linguagem = ArtefatosTecnologiaResponse(**dados_linguagem_analise)
        #linguagem_analise = analise_linguagem.linguagem_analise
        
        #tabela_raw = analise_linguagem.tabela_categorizacao
        #tabela_formatada = tabela_raw.replace('\n\n', '\n')  # Remove quebras duplas

        #dados_banco_dados_analise = json.loads(analisar_bd_task.output.raw)
        #analise_banco_dados = ArtefatosTecnologiaResponse(**dados_banco_dados_analise)
        #banco_de_dados_analise = analise_banco_dados.banco_dados_analise

        tabela_formatada = result.pydantic.tabela_categorizacao
        linguagem_analise = result.pydantic.linguagem_analise
        banco_de_dados_analise = result.pydantic.banco_dados_analise
        sistemas_analise = result.pydantic.sistemas_analise
        infraestrutura_analise = result.pydantic.infraestrutura_analise
        devsecops_analise = result.pydantic.devsecops_analise

        print(crew.usage_metrics)
        update_status("‚úÖ **An√°lise t√©cnica conclu√≠da:** Relat√≥rio gerado com sucesso!", 100)

        return (f"{tabela_formatada}\n\n  {linguagem_analise} \n\n {banco_de_dados_analise} \n\n {sistemas_analise} \n\n {infraestrutura_analise} \n\n {devsecops_analise}")


    @listen("Agente de Codigo")
    def agente_codigo(self):
        update_status("üíª **Agente de C√≥digo:** Analisando c√≥digo de programa√ß√£o...", 50)
        resposta = """TESTE: Agente de Codigo"""
        update_status("‚úÖ **An√°lise de c√≥digo conclu√≠da:** C√≥digo processado com sucesso", 100)
        return resposta


# Usage example
async def run_flow(inputs: Dict[str, str]):
    flow = AnaliseArtefatosFlow()
    flow.plot("AnaliseArtefatosFlowPlot")
    #result = await flow.kickoff_async(inputs={"input": "Pokemon"})
    result = await flow.kickoff_async(inputs)
    return result


# Run the flow
#if __name__ == "__main__":
#    asyncio.run(run_flow())